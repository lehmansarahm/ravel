#!/usr/bin/env python

import time
from time import sleep
import psutil
import datetime
import subprocess
import os
import sys, argparse
from optparse import OptionParser

MONITOR_INTERVAL = 60

LOG_RESOURCE_INTERVAL = 10
logResources = False

useAutoclose = False
autoCloseTime = 0

# Set up new log file for a new day
logFilename = "monitor_logs/log_{0}.txt".format(time.strftime("%m-%d-%Y"))
log = open(logFilename,"a")

# -------------------------------------------------------------------
# -------------------------------------------------------------------

def update_backup_script():
	log.write("{0} [INFO] - Process found!  Backing up the database.\n".format(datetime.datetime.now()))
	log.flush()
	os.system("sudo -u ravel pg_dump ravel > /home/ravel/ravel/ep/backup.sql")

# -------------------------------------------------------------------
# -------------------------------------------------------------------

def update_boot_script():
	# Read last Ravel topology from file
	with open("configs/topo.txt","r") as topo_file:
		ravelTopo = topo_file.read()

	# Update log
	log.write("{0} [ERROR] - Process not found! Time to restart with topology: {1}\n".format(datetime.datetime.now(), ravelTopo))
	log.flush()
	
	# Print updated contents of boot shell
	with open("boot.sh","r+w") as boot_shell:
		ravelLaunch = "#!/bin/sh \n"\
			"cd /home/ravel/ravel \n"\
			"./ravel.py --clean \n"\
			"./ravel.py --topo={0} --restore".format(ravelTopo)
		boot_shell.write(ravelLaunch)

	# Start Ravel boot script
	with open ("resource_logs/boottime.txt", "a") as bootTimeLog:
		bootTimeLog.write("{0} - Launching Ravel".format(datetime.datetime.now()))
	subprocess.Popen(["gnome-terminal", "--command", "./boot.sh"])

# -------------------------------------------------------------------
# -------------------------------------------------------------------

def check_process():
	# Read Ravel process ID from file
	with open("configs/pid.txt","r") as pid_file:
		ravelPID = pid_file.read()

	# Attempt to locate process
	# If found, update database backup
	if (psutil.pid_exists(int(ravelPID))):
		update_backup_script()
	# If not found, restart Ravel system
	else:
		update_boot_script()

# -------------------------------------------------------------------
# -------------------------------------------------------------------

def log_resources():
	with open("configs/pid.txt","r") as pid_file:
		# Grab current Ravel process ID
		ravelPID = pid_file.read()
		os.system('ps -p {0} -o %cpu,%mem,cmd >> /home/ravel/ravel/ep/resource_logs/ravel_{1}.txt'.format(ravelPID, time.strftime("%m-%d-%Y")))

		# Grab current EP monitor process ID
		monitorPID = os.getpid()
		os.system('ps -p {0} -o %cpu,%mem,cmd >> /home/ravel/ravel/ep/resource_logs/ep_{1}.txt'.format(monitorPID, time.strftime("%m-%d-%Y")))

# -------------------------------------------------------------------
# -------------------------------------------------------------------

def create_parser():
	parser = argparse.ArgumentParser(description='Monitor the current network controller')
	parser.add_argument('--autoclose', type=int, default=None, help='Automatically shuts down the EverPresent monitor after a given period of time in minutes')
	parser.add_argument('--logResources', action="store_true", default=False, help='Records the CPU and memory usages of the EverPresent and Ravel processes, and writes the values to a log file')
	return parser;

# -------------------------------------------------------------------
# -------------------------------------------------------------------

if __name__ == "__main__":
	# Parse any necessary arguments
	args = create_parser().parse_args()
	if args.logResources:
		logResources = True
	if args.autoclose:
		useAutoclose = True
		autoCloseTime = args.autoclose

	# Write this process's ID to file
	with open("configs/mpid.txt","w") as mpid_file:
		mpid_file.write("%s" % os.getpid())

	# Start monitor loop
	execTime = LOG_RESOURCE_INTERVAL
	while (not useAutoclose or (autoCloseTime > 0)):
		if (execTime % MONITOR_INTERVAL == 0):
			if (useAutoclose):
				print "EverPresent will autoclose in {0} minutes".format(autoCloseTime)
			check_process()
			sleep(MONITOR_INTERVAL)
			autoCloseTime -= (MONITOR_INTERVAL/60)
		else:
			log_resources()
			execTime += LOG_RESOURCE_INTERVAL

	# Once loop is complete, exit
	log.close()
	sys.exit()
